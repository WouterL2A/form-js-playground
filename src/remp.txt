// First, set up a new React app using create-react-app (free tool). Install Node.js from nodejs.org if not installed.
// Run in terminal: npx create-react-app form-playground-app --template typescript
// cd form-playground-app
// npm install @bpmn-io/form-js-editor @bpmn-io/form-js-viewer html2canvas jspdf
// Also need CSS: npm install @bpmn-io/form-js@latest --save (for assets)
// Replace src/App.tsx with the following code.
// Then run npm start to test locally.

import React, { useRef, useEffect, useState, ChangeEvent } from 'react';
import { FormEditor } from '@bpmn-io/form-js-editor';
import { Form } from '@bpmn-io/form-js-viewer';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

import '@bpmn-io/form-js/dist/assets/form-js.css';
import '@bpmn-io/form-js/dist/assets/form-js-editor.css';

function App() {
  const editorRef = useRef<HTMLDivElement>(null);
  const viewerRef = useRef<HTMLDivElement>(null);
  const [editor, setEditor] = useState<FormEditor | null>(null);
  const [form, setForm] = useState<Form | null>(null);
  const [currentSchema, setCurrentSchema] = useState({ components: [], type: 'default' }); // Initial empty schema
  const [currentData, setCurrentData] = useState({});
  const [activeTab, setActiveTab] = useState<'editor' | 'preview'>('editor');

  useEffect(() => {
    if (editorRef.current && viewerRef.current) {
      const formEditor = new FormEditor({
        container: editorRef.current,
      });

      const formViewer = new Form({
        container: viewerRef.current,
      });

      setEditor(formEditor);
      setForm(formViewer);

      // Initial import
      formEditor.importSchema(currentSchema).catch(console.error);
      formViewer.importSchema(currentSchema, currentData).catch(console.error);

      // Listen to changes in editor
      const handler = () => {
        if (editor) {
          try {
            // @ts-ignore
            const schema = editor.getSchema();
            setCurrentSchema(schema);
            form?.importSchema(schema, currentData).catch(console.error);
          } catch (err) {
            console.error('Error updating viewer:', err);
          }
        }
      };
      formEditor.on('changed', handler);

      // Listen to changes in viewer (data changes)
      formViewer.on('changed', (event: { data: any }) => {
        setCurrentData(event.data);
      });

      return () => {
        formEditor.off('changed', handler);
        formEditor.destroy();
        formViewer.destroy();
      };
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  // Save Schema to file
  const saveSchema = () => {
    if (editor) {
      try {
        // @ts-ignore
        const schema = editor.getSchema();
        const blob = new Blob([JSON.stringify(schema, null, 2)], { type: 'application/json' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'form-schema.json';
        a.click();
        URL.revokeObjectURL(url);
      } catch (err) {
        console.error('Error saving schema:', err);
      }
    }
  };

  // Load Schema from file
  const loadSchema = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && editor) {
      const reader = new FileReader();
      reader.onload = (e) => {
        if (e.target?.result && typeof e.target.result === 'string') {
          try {
            const newSchema = JSON.parse(e.target.result);
            editor.importSchema(newSchema).catch(console.error);
            setCurrentSchema(newSchema);
            form?.importSchema(newSchema, currentData).catch(console.error);
          } catch (err) {
            console.error('Error loading schema:', err);
          }
        }
      };
      reader.readAsText(file);
    }
  };

  // Save Data to file
  const saveData = () => {
    const blob = new Blob([JSON.stringify(currentData, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'form-data.json';
    a.click();
    URL.revokeObjectURL(url);
  };

  // Load Data from file
  const loadData = (event: ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file && form) {
      const reader = new FileReader();
      reader.onload = (e) => {
        if (e.target?.result && typeof e.target.result === 'string') {
          try {
            const newData = JSON.parse(e.target.result);
            setCurrentData(newData);
            form.importSchema(currentSchema, newData).catch(console.error);
          } catch (err) {
            console.error('Error loading data:', err);
          }
        }
      };
      reader.readAsText(file);
    }
  };

  // Export Form to PDF
  const exportToPDF = () => {
    if (viewerRef.current) {
      html2canvas(viewerRef.current).then((canvas) => {
        const imgData = canvas.toDataURL('image/png');
        const pdf = new jsPDF();
        const imgProps = pdf.getImageProperties(imgData);
        const pdfWidth = pdf.internal.pageSize.getWidth();
        const pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
        pdf.addImage(imgData, 'PNG', 0, 0, pdfWidth, pdfHeight);
        pdf.save('form.pdf');
      });
    }
  };

  return (
    <div style={{ height: '100vh', display: 'flex', flexDirection: 'column' }}>
      <div style={{ display: 'flex', justifyContent: 'flex-end', background: '#f0f0f0', padding: '10px', gap: '10px' }}>
        <button onClick={saveSchema}>Save Schema</button>
        <input type="file" onChange={loadSchema} accept=".json" />
        <button onClick={saveData}>Save Data</button>
        <input type="file" onChange={loadData} accept=".json" />
        <button onClick={exportToPDF}>Export to PDF</button>
      </div>
      <div style={{ display: 'flex', justifyContent: 'center', background: '#e0e0e0', padding: '10px' }}>
        <button 
          onClick={() => setActiveTab('editor')} 
          style={{ marginRight: '10px', fontWeight: activeTab === 'editor' ? 'bold' : 'normal' }}
        >
          Form Editor
        </button>
        <button 
          onClick={() => setActiveTab('preview')} 
          style={{ fontWeight: activeTab === 'preview' ? 'bold' : 'normal' }}
        >
          Form Preview
        </button>
      </div>
      <div style={{ flex: 1 }}>
        <div 
          style={{ 
            display: activeTab === 'editor' ? 'block' : 'none', 
            height: '100%', 
            width: '100%' 
          }}
        >
          <div ref={editorRef} style={{ height: '100%' }}></div>
        </div>
        <div 
          style={{ 
            display: activeTab === 'preview' ? 'block' : 'none', 
            height: '100%', 
            width: '100%' 
          }}
        >
          <div ref={viewerRef} style={{ height: '100%' }}></div>
        </div>
      </div>
    </div>
  );
}

export default App;